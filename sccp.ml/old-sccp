 
open Printf
open Sqlite3

exception Chess_error of string

(* database, used for opening book, perft tests, and so on *)
let dbh = db_open "sccp.db"

let flat x = List.map (function None->""|Some(x)->x) (Array.to_list x)

let lexec query func = ignore(exec_no_headers dbh ~cb:(fun row->func (flat row)) query)

let iexec query = lexec query (fun _->())

let llexec query = let ll = ref [] in lexec query (fun l->ll:=l::(!ll)); !ll

(* see if a square is on the board or not *)
let x88_ok sq = 0x88 land sq = 0

let get_col sq = sq mod 16
let get_row sq = sq / 16
let get_row_col sq = (sq/16),(sq mod 16)

let a8=0 and b8=1 and c8=2 and d8=3 and e8=4 and f8=5 and g8=6 and h8=7 and 
    a7=16 and b7=17 and c7=18 and d7=19 and e7=20 and f7=21 and g7=22 and h7=23 and 
    a6=32 and b6=33 and c6=34 and d6=35 and e6=36 and f6=37 and g6=38 and h6=39 and 
    a5=48 and b5=49 and c5=50 and d5=51 and e5=52 and f5=53 and g5=54 and h5=55 and 
    a4=64 and b4=65 and c4=66 and d4=67 and e4=68 and f4=69 and g4=70 and h4=71 and 
    a3=80 and b3=81 and c3=82 and d3=83 and e3=84 and f3=85 and g3=86 and h3=87 and 
    a2=96 and b2=97 and c2=98 and d2=99 and e2=100 and f2=101 and g2=102 and h2=103 and 
    a1=112 and b1=113 and c1=114 and d1=115 and e1=116 and f1=117 and g1=118 and h1=119

let square_to_string sq = sprintf "%c%c" "abcdefgh".[get_col sq] "87654321".[get_row sq]

let sqr x = x * x

(* create a list of a range of numbers *) 
let range x y = 
  let rec irange x l = if x < y then irange (x+1) (x::l) else List.rev ( l ) in
  irange x []

(* make a list of the valid x88 squares *)
let x88_squares = List.filter x88_ok (range 0 128)

let sgn x = if x = 0 then 0 else ( if x < 1 then -1 else 1 )

(* declare the main types: kinds of moves, moves, and pieces *)

type special = Nothing | Double of int | Promotes_to of piece | Ep of int | Castleshort | Castlelong
  and 
move = {  
  f : int ; 
  t : int ;
  player : unit -> unit ; 
  unplayer : unit -> unit ; 
  s : special 
} 
  and 
piece = {
  value : int ; 
  glyph : string ; 
  evaluate : int -> int ;
  generate : int -> move list -> move list ; 
  hashes : int array
}

let move_to_string m = sprintf "%s%s%s" (square_to_string m.f) (square_to_string m.t)
  ( match m.s with Promotes_to( p ) -> sprintf "%c" p.glyph.[1] | 
                   _ -> "")

let get_hashes pg = let ar = Array.create 128 0 in
  lexec (sprintf "select hash,square from hashes where piece='%s'" pg)
  (fun hs->match hs with [hk;sq]->ar.(int_of_string sq)<-(int_of_string hk)|_->()); ar

let make_piece v g e gn = { value = v ; glyph = g ; evaluate = e ; generate = gn ; hashes = get_hashes g }
  
(* we need an empty square type to create a board *) 
let empty = make_piece 0 "  " (fun x->0) (fun _ ml->ml)

let make_board func dummy = 
  Array.init 128 (fun sq->if x88_ok sq then (func sq) else dummy)

(* the chessboard *) 
let board = make_board (fun _->empty) empty 

let board_hash = ref 0 
let to_move = ref 1

let black_hash_key = 111111

let compute_board_hash() =
  (if (!to_move)=1 then 0 else black_hash_key) lxor
  (List.fold_left (fun hash sq->hash lxor board.(sq).hashes.(sq)) 0 x88_squares)

(* board to track to/from traffic, used so far only in castling *)
let traffic = make_board (fun _->0) 0

let print_board extractor bd = 
 let dv () = printf "+---+---+---+---+---+---+---+---+\n" in
 dv(); printf "|";
 List.iter (fun sq-> printf "%s |" (extractor bd.(sq)); 
                     if get_col sq=7 then ( printf "\n"; dv(); printf "|" ) else () 
            )  x88_squares

let print_chess_board () = print_board (fun pc->pc.glyph) board
let print_int_board = print_board string_of_int  

(* push not just captures, but all squares we moved to *)
let captures = ref []

let material = ref 0

let wpawns = Array.create 8 [] and bpawns = Array.create 8 []

let white_king_at = ref 0 and black_king_at = ref 0 

let hashme sq p = board_hash := p.hashes.(sq) lxor !board_hash

let add_piece_at sq p =
  hashme sq p; 
  if board.(sq).value <> 0 then
    ( print_chess_board(); printf "to: %d\n" sq; assert (sq=666); );
  board.(sq) <- p; 
  match p.value with
    100    -> wpawns.(get_col sq) <- (get_row sq)::wpawns.(get_col sq) |
    (-100) ->  bpawns.(get_col sq) <- (get_row sq)::bpawns.(get_col sq) | 
    10000  -> white_king_at := sq | 
    (-10000) -> black_king_at := sq |
    _ -> ();
  material := !material + p.value
    
let filter sq pawns = 
  let row,col = get_row_col sq in
  pawns.(col) <- List.filter (fun r2->row<>r2) pawns.(col)  

let remove_piece_at sq =
  let pc = board.(sq) in board.(sq)<-empty; 
  hashme sq pc; 
  material := !material - pc.value;
  (match pc.value with 
    100    -> filter sq wpawns |
    (-100) ->  filter sq bpawns | 
    _ -> ());
  pc

let push_piece_at sq = captures := ((remove_piece_at sq),sq)::(!captures)

let pop_piece_at sq = match (!captures) with
  (pc,sq2)::rest -> captures := rest; add_piece_at sq pc | 
  []             -> () (* raise Exception "capture stack empty" *)

let slide f t = add_piece_at t (remove_piece_at f)

let move_stack = ref []

let flip_to_move () = to_move := - !to_move; board_hash := black_hash_key lxor !board_hash

let is_promo m = match m.s with Promotes_to(_)->true| _ -> false

let halfmove = ref 0 

let play m = let capt = board.(m.t).value<>0 || is_promo m in 
               move_stack :=  m::(!move_stack);
               traffic.(m.f)<-traffic.(m.f)+1;
               traffic.(m.t)<-traffic.(m.t)+1;
               flip_to_move(); m.player(); 
               halfmove := !halfmove + 1;
               capt

let unplay m = move_stack := List.tl (!move_stack); flip_to_move(); m.unplayer();
               traffic.(m.f)<-traffic.(m.f)-1; 
               traffic.(m.t)<-traffic.(m.t)-1;
               halfmove := !halfmove - 1 

let make_move _s _f _t = 
 { f = _f ; t = _t ;
   player = (fun ()->push_piece_at _t; slide _f _t) ; 
   unplayer = (fun ()->slide _t _f; pop_piece_at _t ) ; s = _s } 

let make_simple_move = make_move Nothing

(* let movelist = ref [] 
let addm mv = movelist := mv::(!movelist) *)

(* for "hopping pieces" add the corresponding moves if the square is ok. optimize *)
let add_hops_if mboard side_for sq movelist = 
 let moves = mboard.(sq) in 
 List.fold_left (fun ml mv->if sgn(board.(mv.t).value)<>side_for then mv::ml else ml) movelist moves 

(* cool but slightly slower (?) *)
let add_hops_if_2 mboard side_for sq movelist =
  (List.filter (fun mv->sgn(board.(mv.t).value)<>side_for) mboard.(sq)) @ movelist

(* curry up functions to add black or white hoppers
let add_white_hopper = add_hops_if 1
let add_black_hopper = add_hops_if (-1) *)

let knight_deltas = [ -33 ; -31 ; -18 ; -14 ; 14 ; 18 ; 31 ; 33 ]

let move_ok move = (x88_ok move.f) && (x88_ok move.t)

let make_hopping_board deltas = 
  make_board (fun from_sq->List.filter move_ok 
      (List.map (fun delt->make_simple_move from_sq (from_sq+delt)) deltas )) []

let carr = [| 1 ; 2 ; 12 ; 16 ; 16 ; 12 ; 2 ; 1 |] 
let row_score = [| -25 ; 0 ; 10 ; 15 ; 20 ; 25 ; 35 ; 35 ; 35 |]
let centralize = make_board (fun sq->carr.(get_row sq)+carr.(get_col sq)) 0
let white_centralize = make_board (fun sq->let row=get_row sq in centralize.(sq)+row_score.(7-row)) 0 
let black_centralize = make_board (fun sq->let row=get_row sq in centralize.(sq)+row_score.(row)) 0
                            
(*let _ = print_int_board white_centralize; print_string "\n\n"; print_int_board black_centralize
*)

let knight_moves = make_hopping_board knight_deltas

let add_knight_hops = add_hops_if knight_moves

let white_knight = make_piece 325 "*n"
  (Array.get white_centralize) (add_knight_hops 1)

let black_knight = make_piece (-325) " N"
  (Array.get black_centralize) (add_knight_hops (-1))

(* now we deal with sliding pieces, so we have several functions to
   generate sliding moves *)

let value_at sq = board.(sq).value
let sign_at sq = sgn( value_at sq )

let add_ray side_for ray ml = 
  let rec inner_add mvs ml = 
    ( match mvs with 
      []   -> ml | 
      mv::r -> let sga = sign_at mv.t in
                 if sga = 0 then inner_add r (mv::ml) else 
                 (if sga = side_for then ml else mv::ml) ) in
  inner_add ray ml

let ray_mover mboard side_for sq movelist = 
  let rec inner_rm rays ml = match rays with [] -> ml |
    f::r -> inner_rm r (add_ray side_for f ml) in
  inner_rm mboard.(sq) movelist
  
let make_ray sq delta = 
  let rec inner_make_ray sq2 acc = if x88_ok sq2 then (inner_make_ray (sq2+delta) ((make_simple_move sq sq2)::acc)) else List.rev(acc) in 
  inner_make_ray (sq+delta) []

let make_rays deltas sq = List.map (fun delta->make_ray sq delta) deltas

(* bishops *) 

let bishop_rays = make_board (make_rays [-17;-15;15;17] ) []

let bishop_mover = ray_mover bishop_rays

let white_bishop = make_piece 350 "*b" (Array.get white_centralize) (bishop_mover 1)

let black_bishop = make_piece (-350) " B" (Array.get black_centralize) (bishop_mover (-1))

(* rooks *)

let rook_rays = make_board (make_rays [-16;-1;1;16] ) []

let rook_mover = ray_mover rook_rays

let rook_eval my_pawns his_pawns seventh_rank sq = 
  let c=get_col sq and r=get_row sq in 
    (if r=seventh_rank then 20 else 0) +
    (if my_pawns.(c)=[] then 20+(if his_pawns.(c)=[] then 20 else 0) else 0)
 
let white_rook = make_piece 500 "*r" (rook_eval wpawns bpawns 1) (rook_mover 1)

let black_rook = make_piece (-500) " R" (rook_eval bpawns wpawns 6)  (rook_mover (-1))

(* queens *)

let queen_rays = make_board (make_rays [-17;-16;-15;-1;1;15;16;17] ) []

let queen_mover = ray_mover queen_rays

let white_queen = make_piece 900 "*q" (fun sq->white_centralize.(sq)/2 ) (queen_mover 1)

let black_queen = make_piece (-900) " Q" (fun sq->black_centralize.(sq)/2 ) (queen_mover (-1))


(* pawns *)

let make_promoter _f _t pc = 
  { f = _f ; t = _t ; 
    player=(fun ()->push_piece_at _f; push_piece_at _t; add_piece_at _t pc ) ; 
  unplayer = (fun ()->let _ = remove_piece_at _t in pop_piece_at _t; pop_piece_at _f) ; s = Promotes_to( pc )  }

let pawn_moves_mp mm pcs f t = let row = get_row t in
  if (row<>0 && row<>7) then [mm f t] else List.map (make_promoter f t) pcs

let mspm = pawn_moves_mp make_simple_move

let white_promotes_to=[white_knight;white_queen;white_rook;white_bishop]

let black_promotes_to=[black_knight;black_queen;black_rook;black_bishop]

let pawn_moves promoters d_list f = 
  let pro t = if x88_ok t then mspm promoters f t else [] in
  List.concat( List.map (fun d->pro (d+f)) d_list )

let white_pawn_moves = pawn_moves white_promotes_to

let black_pawn_moves = pawn_moves black_promotes_to

let w_pawn_caps = make_board (white_pawn_moves [-17;-15]) [] and
    w_pawn_moves= make_board (white_pawn_moves [-16]) []
 
let b_pawn_caps = make_board (black_pawn_moves [17;15]) [] and
    b_pawn_moves= make_board (black_pawn_moves [16]) []

(*let rowgen = Array.init 8 *)

let make_double_move f over t = make_move (Double(over)) f t 

let empty_sq sq = board.( sq ).value = 0

let test_double arr row sq =
  if get_row sq = row then (let m = arr.(get_col sq) in
      if empty_sq(m.t) && empty_sq((m.t+m.f)/2) then [m] else [] ) else [] 

let make_en_pesant _f _t lift = 
  { f = _f ; t = _t ; 
    player = (fun ()->slide _f _t; push_piece_at lift) ; 
    unplayer = (fun ()->slide _t _f; pop_piece_at lift) ;
    s = Ep(lift) }

let make_ep_moves dir offs col = let sq = offs + col in  
  List.filter (fun m->x88_ok m.t) (List.map (fun o->make_en_pesant sq (sq+o+dir) (sq+o)) [-1;1])

let white_ep_moves = Array.init 8 (make_ep_moves (-16) a5) 
let black_ep_moves = Array.init 8 (make_ep_moves 16 a4) 

let last_special () = match !move_stack with []->Nothing | f::r -> f.s

let test_ep arr row sq = 
  if get_row sq = row then
    (match last_special() with Double(over) -> List.filter (fun m->m.t=over) arr.(get_col sq) | _ -> [] ) else []
   
let pawn_move_generator moves capts other_side double_moves double_row ep_moves ep_row from ml = 
  let cap = capts.(from) and mvs = moves.(from) in 
   (List.filter (fun mv->sign_at(mv.t) = other_side) cap) @ 
   (List.filter (fun mv->empty_sq mv.t) mvs) @ 
   (test_double double_moves double_row from) @
   (test_ep ep_moves ep_row from) @ ml

let white_doubles = Array.init 8 (fun sq->make_double_move (sq+a2) (sq+a3) (sq+a4)) 
let black_doubles = Array.init 8 (fun sq->make_double_move (sq+a7) (sq+a6) (sq+a5))
 
let white_pass_col my_row foes = not ( List.exists ( fun foe->foe < my_row ) foes )
let black_pass_col my_row foes = not ( List.exists ( fun foe->foe > my_row ) foes )

let passed_pawn_score passfunc scorefunc sq foes = 
  let row,col = get_row_col sq in
  if ( col > 0 && passfunc row foes.(col-1) ) &&
     ( passfunc row foes.(col)) &&
     ( col < 7 && passfunc row foes.(col+1) ) then (scorefunc row) else 0

let white_passed_pawn_score = 
  passed_pawn_score white_pass_col ( fun row->100 + 5 lsl ( 6 - row ) )

let black_passed_pawn_score = 
  passed_pawn_score black_pass_col ( fun row->100 + 5 lsl ( row - 1 ) )

 
(* TODO: score passed pawns, blocked central pawns, etc *)
let pawn_eval my_allies my_foes start_row direc passed_pawn_score sq =
  let r,c = get_row_col sq in 
    (if (c=3 || c=4) && r=start_row && value_at(sq+direc)<>0 then -30 else 0)+
    (if List.length( my_allies.(c)) > 1 then -20 else 0)+
    (if c>0 && my_allies.(c-1)=[] then -20 else 0)+
    (if c<7 && my_allies.(c+1)=[] then -20 else 0)+
    (passed_pawn_score sq my_foes)

let white_pawn = make_piece 100 "*p" (pawn_eval wpawns bpawns 6 (-16) white_passed_pawn_score ) 
    (pawn_move_generator w_pawn_moves w_pawn_caps (-1) white_doubles 6 white_ep_moves 3 )
let black_pawn = make_piece (-100) " P" (pawn_eval bpawns wpawns 1 16 black_passed_pawn_score ) 
    (pawn_move_generator b_pawn_moves b_pawn_caps 1 black_doubles 1 black_ep_moves 4 )

(* kings *) 

let king_deltas = [ -17 ; -16 ; -15 ; -1 ; 1 ; 15 ; 16 ; 17 ]

let king_moves = make_hopping_board king_deltas
let add_king_hops = add_hops_if king_moves

let rec board_stripe_like sq pcs =
  match pcs with [] -> true |
    p::r -> if board.(sq).value = p then board_stripe_like (sq+1) r else false

let make_castle kf kt rf rt ct = 
  {f=kf;t=kt;player=(fun ()->slide kf kt; slide rf rt);
   unplayer=(fun()->slide kt kf;slide rt rf);s=ct}

let wcs = make_castle e1 g1 h1 f1 Castleshort
let wcl = make_castle e1 c1 a1 d1 Castlelong

let bcs = make_castle e8 g8 h8 f8 Castleshort
let bcl = make_castle e8 c8 a8 d8 Castlelong

let hopper_attacks sq pc delt = List.exists (fun off->let s=off+sq in x88_ok s && board.(s).value = pc ) delt

let rec ray_ends_with = function [] -> 0 | 
   m::r -> let v = board.(m.t).value in if v=0 then ray_ends_with r else v
   
let ray_has_attackers atk ray = List.mem (ray_ends_with ray) atk

let rays_have_attackers sq rays atk = List.exists (ray_has_attackers atk) rays.(sq)

let bbq =  [ black_bishop.value ; black_queen.value ] and brq = [ black_rook.value ; black_queen.value ] and
    wbq = [ white_bishop.value ; white_queen.value ] and wrq = [ white_rook.value ; white_queen.value ]

let black_attacks sq = hopper_attacks sq black_knight.value knight_deltas ||
          hopper_attacks sq (-10000) king_deltas ||
          rays_have_attackers sq bishop_rays bbq ||
          rays_have_attackers sq rook_rays brq ||
          List.exists (fun mv->board.(mv.t).value=(-100)) w_pawn_caps.(sq)
                  
let white_attacks sq = hopper_attacks sq white_knight.value knight_deltas ||
          hopper_attacks sq 10000 king_deltas ||
          rays_have_attackers sq bishop_rays wbq||
          rays_have_attackers sq rook_rays wrq ||
          List.exists (fun mv->board.(mv.t).value=100) b_pawn_caps.(sq) 

let can_castle sq strip ksq kt rt attackf = 
  board_stripe_like sq strip && (not (List.exists attackf ksq) ) &&
  traffic.(kt)=0 && traffic.(rt)=0

let white_king = make_piece 10000 "*k"
  (fun sq-> -black_centralize.(sq)) 
  (fun sq ml->let ml=add_king_hops 1 sq ml in
     let ml = (if (can_castle e1 [10000;0;0;white_rook.value] [e1;f1;g1] e1 h1 black_attacks) then wcs::ml else ml) in
     if can_castle a1 [white_rook.value;0;0;0;10000] [e1;d1;c1] e1 a1 black_attacks then wcl::ml else ml)

let black_king = make_piece (-10000) " K"
  (fun sq-> -white_centralize.(sq))   
  (fun sq ml->let ml=add_king_hops (-1) sq ml in
     let ml = (if can_castle e8 [-10000;0;0;black_rook.value] [e8;f8;g8] e8 h8 white_attacks then bcs::ml else ml) in
     if can_castle a8 [black_rook.value;0;0;0;-10000] [e8;d8;c8] e8 a8 white_attacks then bcl::ml else ml)

let side_in_check side = if side = -1 then (white_attacks !black_king_at) else 
                                           (black_attacks !white_king_at)
let left_in_check () = side_in_check (- !to_move ) 
let am_i_in_check () = side_in_check !to_move 

let pieces = [ white_knight ; white_bishop ; white_rook ; white_queen ; 
               white_king ; black_knight ; black_bishop ; black_rook ;
               black_queen ; black_king ; white_pawn ; black_pawn ]


let decode_fen( str ) = 
  List.iter (fun sq->ignore(remove_piece_at sq)) x88_squares;
  let sq = ref x88_squares in
  let add pc = add_piece_at (List.hd !sq) pc; sq := List.tl !sq in
  String.iter (fun ch->match ch with 
    '1'..'8' -> let rep = int_of_char ch in for a = 1 to (rep-48) do add empty done |
     _ -> add (List.hd (List.filter (fun pc->pc.glyph.[1]=ch) pieces))) str;
  board_hash := compute_board_hash()

let start_fen = "RNBQKBNRPPPPPPPP8888pppppppprnbqkbnr"

let evaluate_board () = List.fold_left(fun score sq->let pc = board.(sq) in let v = pc.value in 
                       score+v+(if v<>0 then (pc.evaluate sq)*(sgn v) else 0) ) 0 x88_squares

let generate_moves side = 
  List.fold_left (fun ml sq-> let pc=board.(sq) in if sgn(pc.value)=side then (pc.generate sq ml) else ml) [] x88_squares 

let board_val () = 
  List.fold_left (fun sum sq->sum+board.(sq).value) 0 x88_squares

let print_moves =  List.iter (fun m->printf "%s " (move_to_string m)) 

(*let pbam () = print_chess_board (); print_moves (generate_moves !to_move)*)

let assertions () =
  assert ((value_at !white_king_at) = 10000);
  assert ((value_at !black_king_at) = (-10000))

let perft x = 
  let count = ref 0 in
  let rec inner_perft d =  if d = x then incr count 
   else List.iter (fun m->ignore(play m); (if left_in_check() = false then inner_perft (d+1) else ()) ; unplay m) (generate_moves !to_move) in
  inner_perft 0; !count

(* time to minimax *) 

let ev() = evaluate_board() * !to_move

let null_move = { f= -1 ; t = -1 ; s = Nothing ; player = (fun _ -> ()) ; unplayer = (fun _ -> ()) }

let max_search_depth = 100

let history_array = Array.init 128 (fun _->Array.create 128 0)

let add_hist move = let v = history_array.(move.f).(move.t) in
  history_array.(move.f).(move.t)<-v+1;
  if (v > 100 ) then 
    for f = 0 to 127 do
      for t = 0 to 127 do 
        history_array.(f).(t) <- history_array.(f).(t)/2
      done
    done

let killers = Array.init max_search_depth (fun _ -> Array.create 2 null_move)

let move_equal m1 m2 = m1.t = m2.t && m1.f = m2.f
let nullmove = move_equal null_move

let swap array e1 e2 = 
  let t = array.(e1) in array.(e1)<-array.(e2); array.(e2)<-t
 
let add_killer move depth = let k = killers.(depth) in
  let me = move_equal move and k0 = k.(0) and k1 = k.(1) in
    if (nullmove k0) then k.(0)<-move else
    if (me k0) then () else 
    if (nullmove k1) then k.(1)<-move else
    if (me k1) then swap k 0 1 

let is_killer move depth = let k = killers.(depth) in
  move_equal k.(0) move || move_equal k.(1) move 
  
type hash_score = Exact of int | Beta of int | Alpha of int 

type hash_entry = { s : hash_score ; m : move list ; depth_left : int } 

let hash_table = Hashtbl.create 10000
let h_add = Hashtbl.replace hash_table and h_find = Hashtbl.find hash_table 

let add_to_hash( score , alpha , beta , line , dl ) = h_add !board_hash 
  { s = if score<=alpha then Alpha(score) else ( if score >= beta then Beta(score) else Exact(score) ) ; 
    m = line ; depth_left = dl }

let hash_find () = try Some(h_find !board_hash) with Not_found -> None

let probe_hash( alpha , beta , depth_left ) = 
  match hash_find () with 
   None-> alpha , beta , [] , None |
   Some(hash_hit)->
     if hash_hit.depth_left < depth_left then ( alpha , beta , hash_hit.m , None ) (* too shallow. *) 
     else (* good depth.  We can maybe improve alpha or beta, or maybe even return a exact score! *)
     match hash_hit.s with 
       Exact(sc)-> (*print_chess_board();
                   printf "to_move , score: %d %d\n" !to_move sc;*)
                   ( alpha , beta , hash_hit.m , Some(sc)     ) |
       Beta(sc) -> ( max alpha sc , beta , hash_hit.m , None ) | 
       Alpha(sc)-> ( alpha , min beta sc , hash_hit.m , None )

(* move ordering *)

type move_box = { sc : int ; mv : move } 
 
let score_move hash_hit last_to depth the_move = (* sum the good move possibilities *)  
 let score = (if move_equal hash_hit the_move then 500 else 0)+ 
  (if the_move.t = last_to then 200 else 0) + 
  (if is_killer the_move depth then 300 else 0) +
  (if value_at(the_move.t)<>0 then 200 else 0) + (* todo: compute goodness of capture *)
  history_array.(the_move.f).(the_move.t) in 
  { sc = score ; mv = the_move } 

let gen_ordered_moves only_breakers last_to depth hh =
  let mvs = (generate_moves !to_move) in
  let boxes = List.map (score_move (match hh with f::r->f | _->null_move) last_to depth) mvs in
  let boxes = if only_breakers then (List.filter (fun box->box.mv.t=last_to) boxes) else boxes in
  let sorted_boxes = (List.sort (fun b1 b2->b2.sc - b1.sc) boxes) in
  List.map (fun box->box.mv) sorted_boxes

let search_count = ref 0 

let nullmove_cutoff depth max_depth last_to imm beta = 
        last_to<> -1 && am_i_in_check() = false && (max_depth-depth>=2) &&
          ( (*printf "null search!\n";*) flip_to_move(); let(sc,_)=imm( -beta , -beta + 1 , depth+2,false,-1) in
          flip_to_move(); (*printf "sc,beta: %d %d\n" (-sc) beta;*) -sc > beta )   

let minimax( alpha , beta , max_depth ) =
  let rec inner_minimax( alpha , beta , depth , last_was_breaker , last_to ) = 
    let depth_left = max_depth - depth in
    incr search_count;
    
    let quiescing = (depth >= max_depth) in
      if quiescing && (last_was_breaker = false)
        then (ev(),[]) else
        let alpha, beta , hash_line , score = probe_hash( alpha , beta , depth_left ) in
        match score with 
           Some( exact_score ) -> (exact_score,hash_line) | (* awesome!  We can just return! *)
           _ -> (if nullmove_cutoff depth max_depth last_to inner_minimax beta then (beta,[]) else
                          minimax_iter( (if quiescing then (max alpha (ev())) else alpha) , 
                          beta , (gen_ordered_moves quiescing last_to depth hash_line) , depth , [] , quiescing ) )
and
  minimax_iter( alpha , beta , mvs , depth , best , any_legal ) = 
        match mvs with 
          [] -> if any_legal then (alpha,best) else (if am_i_in_check() then (-10000+depth,[]) else (0,[]) )|
          m::r -> let capt = play m in 
                  if left_in_check() then (unplay m;minimax_iter( alpha , beta , r , depth , best,any_legal)) else (
                  let (_sc,bs) = inner_minimax( -beta , -alpha , depth+1 , capt , m.t ) in
                  add_to_hash( _sc , -beta , -alpha , bs , (max_depth - depth) - 1 );
                  let sc = -_sc in 
                    unplay m;
                    if (sc>beta) then (add_killer m depth; (sc,best)) else 
                      ( if sc > alpha then (add_hist m;minimax_iter( sc , beta , r , depth , m::bs , true )) 
                                      else minimax_iter( alpha , beta , r , depth , best , true ))) in
  inner_minimax( alpha , beta , 0 , false , -1 )
 
let rec window_search depth alpha beta =
  printf "searching depth %d with window %d %d\n" depth alpha beta; flush stdout;
  let s,l = minimax( alpha , beta , depth ) in
    if s <= alpha then window_search depth (alpha - 50) beta  else
    if s >= beta then window_search depth alpha (beta + 50) else
    (s,l)

let make_timer () =
  let st = Unix.time() in (fun ()->((Unix.time())-.st))

let search depth = let ls = ref (0,[]) and st = make_timer() and guess = ref 0 in
                   Hashtbl.clear hash_table; search_count := 0; 
                   for a = 1 to depth do
                     let s,l = window_search a (!guess-50) (!guess+50) in
                     guess := s; ls:=(s,l);
                     printf "depth : %d score: %d line %s\n" a s (String.concat " " (List.map move_to_string l)) 
                   done;
                   printf "I searched %d nodes %f\n" !search_count (st());
                   printf "hash table size %d\n" (Hashtbl.length hash_table);
                   (!ls,!search_count)

let string_to_move s = 
  match List.filter (fun m->(move_to_string m)=s) (generate_moves !to_move) with
   [] -> None | f::r -> Some(f)

let _ = decode_fen start_fen

let board_to_string () = 
  String.concat "" (List.map (fun sq->String.sub board.(sq).glyph 1 1) x88_squares)
  
(* todo: make sure we actually searched more nodes than the brain position *) 
let add_to_brain board depth move ns = 
  iexec (sprintf "delete from brain where position='%s';insert into brain (position,depth,move,nodes_searched) values('%s',%d,'%s',%d)" board board depth move ns) 
  
let book_or_brain_move bs depth = 
   let mv = llexec (sprintf "select move from book_moves natural join book_positions where board='%s' order by random() limit 1" bs) in
   match mv with 
     (f::_)::_->printf "book move %s!\n" f; string_to_move(f)|
     _ -> match (llexec (sprintf "select move from brain where position='%s' and depth>=%d" bs depth)) with
          [[mv]]->printf "brain move %s\n" mv; string_to_move(mv)|
           _ -> None 

let get_machine_move depth = let bs = (board_to_string()) in
  match (book_or_brain_move bs depth) with 
      Some(mv)->mv|
      _ -> let ((s,best_line),searched) = (search depth) in 
           let mb = (List.hd best_line) in 
            add_to_brain bs depth (move_to_string mb) !search_count; mb

(* perft and search testing, based on a databse of positions *)

let run_perft_test_level = function
   [depth;count] -> let timer = make_timer() in
       printf "testing depth %s. expecting %s -- " depth count;
       let res = perft (int_of_string depth) in 
         if res = (int_of_string count) then print_string "success!\n" else printf "boo--got %d\n" res;
         printf "took %f seconds\n" (timer()); flush stdout | 
   _ -> ()
     
let run_perft_test_levels pos_num = 
  let str = (sprintf "select depth,count from test_numbers where pos_num = %s" pos_num) in
  lexec str run_perft_test_level
   
let run_tests func = lexec "select * from test_positions where pos_num=2" (function [s1;s2]->decode_fen s2; print_chess_board(); func s1 | _ -> ())
 
let run_perft_tests () = run_tests run_perft_test_levels  

let search_tests ()  = run_tests (fun _->ignore(search 7))

let new_board() = fprintf Pervasives.stderr "new board called\n"
   (* reset board to starting configurartion *)

let randomize() = ()  (* add some randomness to play *)

let set_time_control mps base inc = () (* set time control *)

let set_time_control_st time = () 

let set_max_depth depth = ()

let set_time t = printf "my time is %d\n" t 

let set_otem t = () (* Set a clock that always belongs to the opponent. N is a number in centiseconds (units of 1/100 second). Even if the opponent changes to playing the opposite color, this clock remains with the opponent. If needed for purposes of board display in force mode (where the engine is not participating in the game) the time clock should be associated with the last color that the engine was set to play, the otim clock with the opposite color. *)

let pam() = let mtp = get_machine_move 4 in 
   printf "move %s\n" (move_to_string mtp); flush stdout; ignore(play mtp);
   Hashtbl.clear hash_table; Gc.full_major()

let play_string_move ul =
  let umi = string_to_move ul in
    match umi with 
      Some( mv ) -> ignore(play mv); pam() |
      None       -> raise (Chess_error "bad move")

let move_now () = ()

let draw_offered() = ()
(*     The engine's opponent offers the engine a draw. To accept the draw, send "offer draw". To decline, ignore the offer (that is, send nothing). If you're playing on ICS, it's possible for the draw offer to have been withdrawn by the time you accept it, so don't assume the game is over because you accept a draw offer. Continue playing until xboard tells you the game is over. See also "offer draw" below. *)

let process_result result comment = () (* result; used for learning *)

let edit_board() = ()   

(* quickie neat and tidy strtok.  Uses currying, of course. *)
let strtok = Str.split (Str.regexp "[ \t\r\n]+")

let f = open_out "chess.log"

let handle_input str = 
 fprintf f "input: %s\n" str; flush f;
 let tokens = strtok str in
   match tokens with 
     [ "xboard" ] -> printf "in xboard mode\n" |
     [ "new" ]   -> new_board() |
     [ "variant" ; v ] -> printf "Sorry, I don't play variant %s yet\n" v |
     [ "quit" ] -> exit 1  |
     [ "random" ] -> randomize() |
     [ "force" ] -> () (* set neither side to play *) |
     [ "go" ] ->  ignore( play (get_machine_move 4)) |
     [ "hard" ] -> ()  |
     [ "protover" ; _ ] -> () | 
     [ "white" ] ->  () |
     [ "black" ] -> () |
     [ "o" ] -> play_string_move ( if !to_move = 1 then "e1g1" else "e8g8" ) |
     [ "o-" ] -> play_string_move ( if !to_move = 1 then "e1c1" else "e8c8" ) |
     [ "level" ; mps ; base ; inc ] -> set_time_control mps base inc  |
     [ "st" ; time ] -> set_time_control_st time |
     [ "sd" ; depth ] -> set_max_depth depth |
     [ "move" ; move ] -> play_string_move move |
     [ "?" ] -> move_now() |
     [ "result" ; result ; comment ] -> process_result result comment |
     [ "edit" ] -> edit_board() |
     [ "hint" ] -> () (* give the user a hint, as if... *) |
     [ "time" ; _ ] -> () |
     [ "otim" ; _ ] -> () |
     [ "perft" ] -> run_perft_tests() | 
     [ "st" ] -> search_tests() | 
     [ move ] -> play_string_move move |
     _ -> printf "unable to handle line %s\n" str
  
let xboard_loop() = 
  while true do
    handle_input (input_line Pervasives.stdin);
    flush Pervasives.stdout
  done
  
let _ = if not !Sys.interactive then ( printf "feature sigint=0\n"; xboard_loop())
